{
    "id": "modbus-tcp-industry4.0",
    "label": "Industry 4.0 - Modbus TCP Integration",
    "nodes": [
        {
            "id": "modbus-server-config",
            "type": "modbus-server",
            "z": "modbus-tcp-industry4.0",
            "name": "PLC Server Config",
            "host": "192.168.1.100",
            "port": "502",
            "type": "tcp",
            "delay": "1000",
            "timeout": "5000",
            "unit_id": "1",
            "autoReconnect": true,
            "reconnectTime": "5000",
            "showStatusActivities": true,
            "showErrors": true,
            "x": 150,
            "y": 100
        },
        {
            "id": "modbus-read-holding",
            "type": "modbus-read",
            "z": "modbus-tcp-industry4.0",
            "name": "Read Holding Registers",
            "showStatusActivities": true,
            "showErrors": true,
            "server": "modbus-server-config",
            "start": "0",
            "end": "10",
            "count": "11",
            "type": "holding",
            "x": 350,
            "y": 100
        },
        {
            "id": "data-transformer",
            "type": "function",
            "z": "modbus-tcp-industry4.0",
            "name": "Transform Data",
            "func": "// Transformar datos Modbus a formato JSON\nconst data = msg.payload;\nconst timestamp = new Date().toISOString();\n\n// Mapear registros a métricas industriales\nconst metrics = {\n    timestamp: timestamp,\n    deviceId: \"PLC-001\",\n    location: \"Planta Principal\",\n    metrics: {\n        status: data[0], // Estado del equipo (0=Off, 1=On, 2=Error)\n        temperature: data[1] / 10, // Temperatura en °C (dividir por 10)\n        rpm: data[2], // RPM del motor\n        pressure: data[3] / 100, // Presión en bar\n        flowRate: data[4] / 10, // Caudal en L/min\n        vibration: data[5] / 100, // Vibración en mm/s\n        powerConsumption: data[6] / 10, // Consumo en kW\n        efficiency: data[7] / 100, // Eficiencia en %\n        maintenanceHours: data[8], // Horas de mantenimiento\n        errorCode: data[9], // Código de error\n        quality: data[10] / 100 // Calidad en %\n    },\n    alerts: []\n};\n\n// Detectar alertas basadas en métricas\nif (metrics.metrics.temperature > 80) {\n    metrics.alerts.push({\n        type: \"temperature_high\",\n        severity: \"warning\",\n        message: `Temperatura alta: ${metrics.metrics.temperature}°C`\n    });\n}\n\nif (metrics.metrics.vibration > 5) {\n    metrics.alerts.push({\n        type: \"vibration_high\",\n        severity: \"critical\",\n        message: `Vibración crítica: ${metrics.metrics.vibration} mm/s`\n    });\n}\n\nif (metrics.metrics.efficiency < 70) {\n    metrics.alerts.push({\n        type: \"efficiency_low\",\n        severity: \"warning\",\n        message: `Eficiencia baja: ${metrics.metrics.efficiency}%`\n    });\n}\n\nmsg.payload = metrics;\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 550,
            "y": 100
        },
        {
            "id": "mqtt-publisher",
            "type": "mqtt out",
            "z": "modbus-tcp-industry4.0",
            "name": "MQTT Publisher",
            "topic": "industry4.0/plc/001/metrics",
            "qos": "1",
            "retain": false,
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "mqtt-broker-config",
            "x": 750,
            "y": 100
        },
        {
            "id": "mqtt-broker-config",
            "type": "mqtt-broker",
            "name": "Local MQTT Broker",
            "broker": "localhost",
            "port": "1883",
            "clientid": "node-red-industry4.0",
            "autoConnect": true,
            "usetls": false,
            "protocolVersion": "4",
            "keepalive": "60",
            "cleansession": true,
            "birthTopic": "",
            "birthQos": "0",
            "birthPayload": "",
            "birthMsg": {},
            "closeTopic": "",
            "closeQos": "0",
            "closePayload": "",
            "closeMsg": {},
            "willTopic": "",
            "willQos": "0",
            "willPayload": "",
            "willMsg": {},
            "userProps": "",
            "sessionExpiry": ""
        },
        {
            "id": "ethereum-signer",
            "type": "function",
            "z": "modbus-tcp-industry4.0",
            "name": "Ethereum Transaction Signer",
            "func": "// Firmar transacción para actualizar metadatos on-chain\nconst ethers = global.get('ethers');\nconst data = msg.payload;\n\n// Solo procesar si hay alertas críticas\nif (data.alerts.some(alert => alert.severity === 'critical')) {\n    try {\n        // Crear transacción para actualizar metadatos del token ERC-721\n        const transaction = {\n            to: global.get('assetTokenContract'),\n            data: ethers.utils.interface.encodeFunctionData('updateAssetMetadata', [\n                data.deviceId,\n                JSON.stringify(data.metrics),\n                data.timestamp\n            ]),\n            gasLimit: 200000\n        };\n        \n        msg.payload = {\n            ...data,\n            ethereumTransaction: transaction\n        };\n        \n        node.log('Transacción Ethereum preparada para alerta crítica');\n    } catch (error) {\n        node.error('Error preparando transacción Ethereum: ' + error.message);\n    }\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 550,
            "y": 200
        },
        {
            "id": "inject-timer",
            "type": "inject",
            "z": "modbus-tcp-industry4.0",
            "name": "Timer (5s)",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "5",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "poll",
            "payload": "",
            "payloadType": "date",
            "x": 150,
            "y": 200
        },
        {
            "id": "dashboard-gauge",
            "type": "ui_gauge",
            "z": "modbus-tcp-industry4.0",
            "name": "Temperature Gauge",
            "group": "dashboard-group",
            "order": 1,
            "width": "6",
            "height": "4",
            "gtype": "gage",
            "title": "Temperatura",
            "label": "°C",
            "format": "{{value}}",
            "min": 0,
            "max": "100",
            "colors": [
                "#00b500",
                "#e6e600",
                "#ca3838"
            ],
            "seg1": "50",
            "seg2": "80",
            "x": 750,
            "y": 200,
            "wires": []
        },
        {
            "id": "dashboard-group",
            "type": "ui_group",
            "name": "Industry 4.0 Dashboard",
            "tab": "dashboard-tab",
            "order": 1,
            "disp": true,
            "collapse": false,
            "className": ""
        },
        {
            "id": "dashboard-tab",
            "type": "ui_tab",
            "name": "Industry 4.0",
            "icon": "dashboard",
            "disabled": false,
            "hidden": false
        },
        {
            "id": "error-handler",
            "type": "function",
            "z": "modbus-tcp-industry4.0",
            "name": "Error Handler",
            "func": "// Manejar errores de conexión y reconexión\nconst error = msg.error || msg.payload;\n\nif (error) {\n    node.log('Error detectado: ' + JSON.stringify(error));\n    \n    // Intentar reconexión automática\n    if (error.code === 'ECONNREFUSED' || error.code === 'ETIMEDOUT') {\n        setTimeout(() => {\n            node.send({\n                topic: 'reconnect',\n                payload: { timestamp: new Date().toISOString() }\n            });\n        }, 5000);\n    }\n    \n    // Publicar error en MQTT\n    msg.payload = {\n        timestamp: new Date().toISOString(),\n        type: 'error',\n        error: error.message || error,\n        deviceId: 'PLC-001'\n    };\n    \n    msg.topic = 'industry4.0/plc/001/errors';\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 950,
            "y": 100
        }
    ],
    "configs": [
        {
            "id": "mqtt-broker-config",
            "type": "mqtt-broker",
            "name": "Local MQTT Broker",
            "broker": "localhost",
            "port": "1883",
            "clientid": "node-red-industry4.0",
            "autoConnect": true,
            "usetls": false,
            "protocolVersion": "4",
            "keepalive": "60",
            "cleansession": true,
            "birthTopic": "",
            "birthQos": "0",
            "birthPayload": "",
            "birthMsg": {},
            "closeTopic": "",
            "closeQos": "0",
            "closePayload": "",
            "closeMsg": {},
            "willTopic": "",
            "willQos": "0",
            "willPayload": "",
            "willMsg": {},
            "userProps": "",
            "sessionExpiry": ""
        }
    ],
    "groups": [
        {
            "id": "dashboard-group",
            "type": "ui_group",
            "name": "Industry 4.0 Dashboard",
            "tab": "dashboard-tab",
            "order": 1,
            "disp": true,
            "collapse": false,
            "className": ""
        }
    ],
    "tabs": [
        {
            "id": "dashboard-tab",
            "type": "ui_tab",
            "name": "Industry 4.0",
            "icon": "dashboard",
            "disabled": false,
            "hidden": false
        }
    ]
} 